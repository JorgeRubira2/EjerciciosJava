- Tipo primitivos, Envoltorios, Optional<Envoltorio>. (A veces dan problemas en la conversion Tipo primitivos, Envoltorios).
- Parametros.   (Objetos y arrays son referencia, tipo primitivos valor)
- Modificadores. (Public, Protected (derivadas y paquete), (Nada) (paquete), Private)
- Herencia. (Reutilización codigo, Base y derivada, las derivadas tienen todo lo de la clase base).
            - Solo se puede heredar de una clase
            - this (atributos o metodos del mismo nivel), super (atributos o metodos de la clase base).
- Sobrecarga metodos (Podemos tener metodos con el mismo nombre pero parametros diferentes).
- Constructores (Se ejecutan al hacer new. Para inicialización de datos)
- Encapsulación (Atributos privados, Leer y modificar getAtributo o setAtributo).
- Object (toString() - equals() - @Override)

- GIT (Add>Commit>Push) (Add>Commit>Pull) (Todos dias Add>Commit>Pull>Merge>(Conflict>Add>Commit)>Push)  Switch Branch, Merge Revision

- Generico (ArrayList<Integer>, ArrayList<Persona> , o clases hechas por vosotros class Nombre<T> )
- Metodos y clases abstractas. Clase abstract (No new), Metodo abstract (No lleva codigo, obligacion de implementarlo clases derivada)
- Metodos y clases final. No queremos que hagan @Override. Clases final (No se pueden crear clases derivadas)
- Interface. Obligar a tener unos metodos. Una clase puede implementar muchas interface. API
             default-> No es importante. Para casos muy concretos.

- Nomenclatura. CamelCase: Clase,Interface->PrimeraMayuscula.  metodos, atributos y variables->primeraMinuscula.
- Enumeraciones (No es tan importante). Constantes (public final static int CONSTANTE) -> enum 
- Switch. (No es tan importante). if (a==4) {  ... } else if ( a > 3 && a< 10) { ... }.

- Collections -> List (ArrayList), Map (HashMap), Set (HashSet).  Add, Remove, Put
- Lambdas -> Interface 1 metodo abstract. Almacenar en un código en una variable. Pasar por parámetro una función.